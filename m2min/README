Alternative bootstrap path using a heavily cut down version of M2-Planet rather
than cc_x86. The cut down version of M2-Planet is called M2_simple_asm.c . This
cut down version supports a very small subset of C (no operators other than =,
simple expressions only, no structs, enums, etc etc, more complete description
of this subset further down this page).

Building:
========

In the parent directory run:

./mk_otccelf

This runs the full tcc bootstrap path, but it also generates some files/tools
that we depend on (temp hack the final version will have its own build script).

Next run:

./mk_simple_asm_self

in the m2min directory. This will use M2_simple_asm.M1 to rebuild itself by
rebuilding M2_simple_asm.c (plus simple_support_m2.c). The resulting binary
(artifacts/M2_simple_asm_m2.exe) is then used to build a copy of otccelf. The
bootstrap process builds bit identical copies of M2_simple_asm.M1 and otccelf.
This can be verified using the following alternative paths:

./mk_simple_asm (builds M2_simple_asm.M1 from M2_simple_asm.c using both tcc
                 and gcc)
./mk_simple_asm_cc_x86 (builds using cc_x86)

mk_simple_asm_self only depends on the availability of hex2 and M0 (which are
built by mk_otccelf and deposited in ../x86/bin/).

Note M2_simple_asm.M1 is a checked in copy of the build artifact generated by
combining both M2_simple_asm.c and simple_support_m2.c and compiling itself.
M2_simple_asm has been adapted to output a simplified assembly language which
is (hopefully) fairly easy to cross referernce with the C source code. See
further down this document for a more detailed description of the assembly
language dialect.

Bootstrap path
==============

Currently incomplete, but the general plan will be:

hex0 -> hex1 -> hex2 -> M0 -> M2_simple_asm.M1 -> otccelf (DONE)
M2_simple_asm then is used to build M2_tcc.c (TODO port this to the
M2_simple_asm dialect).
M2_tcc build tcc.js and then the standard tcc_bootstrap_alt bootstrap process
continues from here up tp tcc-0.9.27

otccelf will then be used to build loaders to run the rest of the steps since
this allows us dynamically link to glibc (which speeds up the bootstrap process
and allows us to generate binaries that can call into system libraries on a
stock Linux distro). At a later date I'll probably add the ability to statically
link to a polyfill libc like ../mk_from_bootstrap_seed can.

Note I originally planned to use otccelf to build tcc.js, but I found that
otccelf will miscompile it (see ../otccelf/mk_js_to_c_alt).
